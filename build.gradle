buildscript {
    repositories {
        mavenLocal()
        jcenter()
        maven { url "http://repo.spring.io/libs-release" }
        maven { url "http://repo.spring.io/libs-milestone" }
        maven { url "http://repo.spring.io/snapshot" }
        maven { url "http://repo.spring.io/plugins-release" }
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion")
        classpath("org.springframework.build.gradle:propdeps-plugin:$propdepsPluginVersion")
        classpath("org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:$sonarqubeVersion")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'propdeps'
apply plugin: 'checkstyle'
apply plugin: 'org.sonarqube'

sourceCompatibility = 1.8

repositories {
    jcenter()
    maven { url "http://repo.spring.io/libs-release" }
    maven { url "http://repo.spring.io/libs-milestone" }
    maven { url "http://repo.spring.io/snapshot" }
    mavenLocal()
}

if (project.hasProperty('env') && project.getProperty('env') == 'production') {
    apply from: 'gradle/production.gradle'
}
else {
    apply from: 'gradle/test.gradle'
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-thymeleaf")
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("org.springframework.boot:spring-boot-starter-data-rest")
    compile("org.springframework.boot:spring-boot-starter-security")
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile("org.springframework.boot:spring-boot-devtools")
    
    compile("org.webjars:webjars-locator")

    compile("org.webjars:bootstrap:${bootstrapVersion}")

    compileOnly("org.projectlombok:lombok")
    annotationProcessor("org.projectlombok:lombok")

    testCompile("org.springframework.boot:spring-boot-starter-test")
}

springBoot {
    executable = true
}

wrapper {
    gradleVersion = '6.0.1'
}

tasks.withType(JavaCompile) {
    options.compilerArgs << '-Xlint:unchecked'
}

checkstyle {
    toolVersion = '7.0'
    configProperties = [
        'headerLocation': 'config/checkstyle/checkstyle-header.txt',
        'suppressionsLocation': 'config/checkstyle/checkstyle-suppressions.xml'
    ]
}
